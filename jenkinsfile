pipeline {
    agent any
      parameters {
        choice(
            name: 'Environment',
            choices: ['main', 'dev', 'qa'],
            description: 'Please Select env'
        )
    }
    tools {
       nodejs "node"
    }
     environment {
        GIT_URL = "https://github.com/choudharyjayant/nodejs.git"
         Zip_Name = "${BUILD_NUMBER}.zip"
         Application_name = "${params.Environment}-${JOB_NAME}"
         
         DeploymentGroup_Name = "DG-${params.Environment}-${JOB_NAME}"
         bucket_name = "${params.Environment}-${JOB_NAME}"
         SONAR_TOKEN = credentials('SONAR_TOKEN_NODEJS')
         HOST_URL = "https://sonarcloud.io"
         PROJECT_KEY = "sonar-nodejs"
         ORGANIZATION = "jenkins-prefav"
     }
    stages {
        stage('Clone Repository') {
            steps {
                git branch: 'main', credentialsId: 'git-cred', url: 'https://github.com/choudharyjayant/nodejs.git'
            
                }
        }
        stage('verifying tools') {
            steps {
                sh ''' #! /bin/bash
		        npm --version
                '''
            }
        }
        stage('Build') {
            steps {
                sh ''' #! /bin/bash
		        npm cache clean --force
                npm install
		#rm -rf node_modules && rm ./package-lock.json (only if needed)
		        sonar-scanner -Dsonar.organization=$ORGANIZATION -Dsonar.projectKey=$PROJECT_KEY -Dsonar.sources=. -Dsonar.host.url=$HOST_URL -Dsonar.login=$SONAR_TOKEN
		#573656664fea3638124df10119e78fc455cd9f6c
                '''
            }
	}
	stage ('Test') {
    	steps {
		    sh ''' #! /bin/bash
		    echo 'hiii'
		
		'''
    	}
	}			
   
    
	stage ('Artifact') {
        steps {
            withCredentials([[ $class: 'AmazonWebServicesCredentialsBinding', credentialsId: 'aws-cred-2']]) {
            
            sh """ #!/bin/bash      
            sudo zip -r ${env.Zip_Name} *
            
            #To push zip folder to s3 
            aws s3 cp ${env.Zip_Name}  s3://${env.bucket_name}/
            """
            }
            }
		}
    stage('Deploy') {
        steps {
            withCredentials([[ $class: 'AmazonWebServicesCredentialsBinding', credentialsId: 'aws-cred-2']]) {
                
                sh """ #! /bin/bash/

                #to deploy on aws from s3 bucket              
                aws deploy create-deployment --application-name ${env.Application_name} --deployment-group-name ${env.DeploymentGroup_Name} --deployment-config-name CodeDeployDefault.AllAtOnce --s3-location bucket=${env.bucket_name},bundleType=zip,key=${env.Zip_Name}
                """
            }
        }
        }
    }
    post {
        always {
            echo 'Stage is success'
        }
    }
}  
